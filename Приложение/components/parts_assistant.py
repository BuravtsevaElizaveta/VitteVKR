# components/parts_assistant.py
# –í–∫–ª–∞–¥–∫–∞ ¬´–ó–∞–ø—á–∞—Å—Ç—å + –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç (ProxyAPI)¬ª.

from __future__ import annotations
from pathlib import Path
from typing import List, Dict, Tuple, Any, Optional
import io, json, base64, datetime as dt, logging

import numpy as np
import pandas as pd
import streamlit as st
from PIL import Image

# --- –ª–æ–∫–∞–ª—å–Ω—ã–π utils —Ä–∞–Ω—å—à–µ –≤–Ω–µ—à–Ω–∏—Ö (–≤–æ –∏–∑–±–µ–∂–∞–Ω–∏–µ –∫–æ–ª–ª–∏–∑–∏–∏ —Å cv2.utils) ---
import sys
sys.path.insert(0, str(Path(__file__).resolve().parent.parent))

from openai import OpenAI
from openai_config import get_client, get_defaults
from utils.db import insert_detection
from utils.pricing import load_price_map, lookup_price, fallback_price

# YOLO –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ (–µ—Å–ª–∏ –Ω–µ—Ç ultralytics ‚Äî –≤–∫–ª–∞–¥–∫–∞ –≤—Å—ë —Ä–∞–≤–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç)
try:
    from ultralytics import YOLO
    _YOLO_OK = True
except Exception:
    _YOLO_OK = False


def _img_bytes_to_data_uri(img_bytes: bytes, max_side: int = 768, quality: int = 80) -> str:
    """–°–∂–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ –≤–µ—Ä–Ω—É—Ç—å data: URI –¥–ª—è GPT-–≤–∏–∑–∏–∏."""
    img = Image.open(io.BytesIO(img_bytes)).convert("RGB")
    w, h = img.size
    scale = min(1.0, max_side / float(max(w, h)))
    if scale < 1.0:
        img = img.resize((int(w * scale), int(h * scale)))
    buf = io.BytesIO()
    img.save(buf, format="JPEG", quality=quality)
    b64 = base64.b64encode(buf.getvalue()).decode()
    return "data:image/jpeg;base64," + b64


def _safe_json(s: str) -> Optional[dict]:
    try:
        return json.loads(s)
    except Exception:
        return None


def _extract_text(resp) -> str:
    """–î–æ—Å—Ç–∞—ë–º —Ç–µ–∫—Å—Ç –∏–∑ ProxyAPI/OpenAI v1 responses.create()."""
    try:
        if hasattr(resp, "output_text") and resp.output_text:
            return resp.output_text.strip()
        if hasattr(resp, "output"):
            parts = []
            for itm in resp.output:
                if getattr(itm, "type", None) == "message":
                    for c in getattr(itm, "content", []):
                        t = getattr(c, "text", None)
                        if t:
                            parts.append(t)
            if parts:
                return " ".join(parts).strip()
    except Exception:
        pass
    return ""


DEFAULT_LABELS = [
    "alternator","battery","brake disc","brake pad","bumper","car door","clutch","crankshaft",
    "cylinder head","drive shaft","engine","exhaust pipe","fan belt","fender","fuel injector",
    "gearbox","headlight","hood","ignition coil","mirror","muffler","oil filter","piston",
    "radiator","rim","seat","shock absorber","spark plug","spring","steering wheel",
    "tail light","throttle body","tire","turbocharger","valve","water pump","wheel",
    "windscreen","wiper","air filter","catalytic converter","control arm","door handle",
    "camshaft","oxygen sensor","strut","bearing","axle","fuel pump"
][:50]

RU_SEED = {
    "alternator":"–≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä","battery":"–∞–∫–∫—É–º—É–ª—è—Ç–æ—Ä","brake disc":"—Ç–æ—Ä–º–æ–∑–Ω–æ–π –¥–∏—Å–∫","brake pad":"—Ç–æ—Ä–º–æ–∑–Ω–∞—è –∫–æ–ª–æ–¥–∫–∞",
    "bumper":"–±–∞–º–ø–µ—Ä","car door":"–¥–≤–µ—Ä—å –∞–≤—Ç–æ–º–æ–±–∏–ª—è","clutch":"—Å—Ü–µ–ø–ª–µ–Ω–∏–µ","crankshaft":"–∫–æ–ª–µ–Ω–≤–∞–ª","cylinder head":"–≥–æ–ª–æ–≤–∫–∞ –±–ª–æ–∫–∞ —Ü–∏–ª–∏–Ω–¥—Ä–æ–≤",
    "drive shaft":"–∫–∞—Ä–¥–∞–Ω–Ω—ã–π –≤–∞–ª","engine":"–¥–≤–∏–≥–∞—Ç–µ–ª—å","exhaust pipe":"–≤—ã—Ö–ª–æ–ø–Ω–∞—è —Ç—Ä—É–±–∞","fan belt":"—Ä–µ–º–µ–Ω—å –≤–µ–Ω—Ç–∏–ª—è—Ç–æ—Ä–∞","fender":"–∫—Ä—ã–ª–æ",
    "fuel injector":"—Ç–æ–ø–ª–∏–≤–Ω–∞—è —Ñ–æ—Ä—Å—É–Ω–∫–∞","gearbox":"–∫–æ—Ä–æ–±–∫–∞ –ø–µ—Ä–µ–¥–∞—á","headlight":"—Ñ–∞—Ä–∞","hood":"–∫–∞–ø–æ—Ç","ignition coil":"–∫–∞—Ç—É—à–∫–∞ –∑–∞–∂–∏–≥–∞–Ω–∏—è",
    "mirror":"–∑–µ—Ä–∫–∞–ª–æ","muffler":"–≥–ª—É—à–∏—Ç–µ–ª—å","oil filter":"–º–∞—Å–ª—è–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä","piston":"–ø–æ—Ä—à–µ–Ω—å","radiator":"—Ä–∞–¥–∏–∞—Ç–æ—Ä",
    "rim":"–¥–∏—Å–∫ –∫–æ–ª–µ—Å–∞","seat":"—Å–∏–¥–µ–Ω—å–µ","shock absorber":"–∞–º–æ—Ä—Ç–∏–∑–∞—Ç–æ—Ä","spark plug":"—Å–≤–µ—á–∞ –∑–∞–∂–∏–≥–∞–Ω–∏—è","spring":"–ø—Ä—É–∂–∏–Ω–∞",
    "steering wheel":"—Ä—É–ª—å","tail light":"–∑–∞–¥–Ω–∏–π —Ñ–æ–Ω–∞—Ä—å","throttle body":"–¥—Ä–æ—Å—Å–µ–ª—å–Ω—ã–π —É–∑–µ–ª","tire":"—à–∏–Ω–∞",
    "turbocharger":"—Ç—É—Ä–±–æ–∫–æ–º–ø—Ä–µ—Å—Å–æ—Ä","valve":"–∫–ª–∞–ø–∞–Ω","water pump":"–≤–æ–¥—è–Ω–æ–π –Ω–∞—Å–æ—Å","wheel":"–∫–æ–ª–µ—Å–æ","windscreen":"–ª–æ–±–æ–≤–æ–µ —Å—Ç–µ–∫–ª–æ",
    "wiper":"–¥–≤–æ—Ä–Ω–∏–∫","air filter":"–≤–æ–∑–¥—É—à–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä","catalytic converter":"–∫–∞—Ç–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π –Ω–µ–π—Ç—Ä–∞–ª–∏–∑–∞—Ç–æ—Ä",
    "control arm":"—Ä—ã—á–∞–≥ –ø–æ–¥–≤–µ—Å–∫–∏","door handle":"–¥–≤–µ—Ä–Ω–∞—è —Ä—É—á–∫–∞","camshaft":"—Ä–∞—Å–ø—Ä–µ–¥–≤–∞–ª","oxygen sensor":"–¥–∞—Ç—á–∏–∫ –∫–∏—Å–ª–æ—Ä–æ–¥–∞ (–ª—è–º–±–¥–∞-–∑–æ–Ω–¥)",
    "strut":"—Å—Ç–æ–π–∫–∞ –ø–æ–¥–≤–µ—Å–∫–∏","bearing":"–ø–æ–¥—à–∏–ø–Ω–∏–∫","axle":"–æ—Å—å","fuel pump":"—Ç–æ–ø–ª–∏–≤–Ω—ã–π –Ω–∞—Å–æ—Å"
}


def _proxy_classify(client: OpenAI, img_bytes: bytes, labels: List[str], model: str) -> List[Tuple[str, float]]:
    """–ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ–º —Ñ–æ—Ç–æ –¥–µ—Ç–∞–ª–∏ —Å—Ä–µ–¥–∏ labels —á–µ—Ä–µ–∑ GPT-–≤–∏–∑–∏—é ProxyAPI (softmax-–ø–æ–¥–æ–±–Ω—ã–π –æ—Ç–≤–µ—Ç)."""
    uri = _img_bytes_to_data_uri(img_bytes, max_side=768, quality=80)
    sys_msg = (
        "–¢—ã ‚Äî CV-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –ü–æ —Ñ–æ—Ç–æ –∞–≤—Ç–æ–∑–∞–ø—á–∞—Å—Ç–∏ –≤–µ—Ä–Ω–∏ JSON —Å—Ç—Ä–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞:\n"
        "{\"top\": [{\"label\": <—Å—Ç—Ä–æ–∫–∞ –∏–∑ —Å–ø–∏—Å–∫–∞>, \"score\": <—á–∏—Å–ª–æ 0..1>}, ...]}"
    )
    user = [
        {"type": "input_text", "text": "–í–∞—Ä–∏–∞–Ω—Ç—ã (–≤—ã–±–µ—Ä–∏ —Å—Ç—Ä–æ–≥–æ –∏–∑ –Ω–∏—Ö): " + ", ".join(labels)},
        {"type": "input_image", "image_url": uri},
    ]
    try:
        resp = client.responses.create(
            model=model,
            input=[{"role": "system", "content": sys_msg}, {"role": "user", "content": user}],
            temperature=0.0,
            max_output_tokens=200,
        )
        data = _safe_json(_extract_text(resp))
        if data and isinstance(data.get("top"), list) and data["top"]:
            pairs: List[Tuple[str, float]] = []
            for it in data["top"]:
                lab = str(it.get("label", "")).strip()
                sc = float(it.get("score", 0.0))
                if lab in labels:
                    pairs.append((lab, sc))
            if pairs:
                s = sum(max(0.0, x[1]) for x in pairs) or 1.0
                # –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º ¬´–æ—Ü–µ–Ω–∫–∏¬ª –≤ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏
                return [(lab, float(sc) / s) for lab, sc in pairs][:5]
    except Exception as e:
        logging.error(f"[Proxy classify] {e}")
    # fallback
    return [(labels[0], 1.0)]


def _proxy_translate(client: OpenAI, labels_en: List[str], model: str) -> Dict[str, str]:
    """–ë—ã—Å—Ç—Ä—ã–π –ø–µ—Ä–µ–≤–æ–¥ –º–µ—Ç–æ–∫ EN‚ÜíRU (—Å seed-—Å–ª–æ–≤–∞—Ä—ë–º)."""
    res = {k: RU_SEED.get(k, k) for k in labels_en}
    pending = [l for l in labels_en if l not in RU_SEED]
    if not pending:
        return res
    sys_msg = (
        "–¢—ã –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Ç–µ—Ä–º–∏–Ω–æ–≤ –∞–≤—Ç–æ–∑–∞–ø—á–∞—Å—Ç–µ–π. –í–µ—Ä–Ω–∏ JSON —Å—Ç—Ä–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞:\n"
        "{\"map\": {\"english\": \"—Ä—É—Å—Å–∫–∏–π\"}}"
    )
    user = [{"type": "input_text", "text": "–ü–µ—Ä–µ–≤–µ–¥–∏: " + ", ".join(pending)}]
    try:
        r = client.responses.create(
            model=model,
            input=[{"role": "system", "content": sys_msg}, {"role": "user", "content": user}],
            temperature=0.0,
            max_output_tokens=200,
        )
        data = _safe_json(_extract_text(r)) or {}
        if isinstance(data.get("map"), dict):
            for k, v in data["map"].items():
                if k in pending and v:
                    res[k] = str(v).strip()
    except Exception as e:
        logging.error(f"[Proxy translate] {e}")
    return res


def _yolo_crops(
    img_bytes: bytes,
    weights_path: Path,
    conf: float = 0.25,
    iou: float = 0.5,
    max_crops: int = 8,
) -> List[bytes]:
    """–ï—Å–ª–∏ YOLO –¥–æ—Å—Ç—É–ø–µ–Ω ‚Äî —Å–Ω–∞—á–∞–ª–∞ –≤—ã—Ä–µ–∑–∞–µ–º –¥–µ—Ç–∞–ª—å(–∏) –∏ –∫–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –∏—Ö –æ—Ç–¥–µ–ª—å–Ω–æ."""
    if not _YOLO_OK or not Path(weights_path).exists():
        return []
    model = YOLO(str(weights_path))
    img = Image.open(io.BytesIO(img_bytes)).convert("RGB")
    res = model.predict(source=np.array(img), conf=conf, iou=iou, verbose=False)
    crops: List[bytes] = []
    for r in res:
        if r.boxes is None:
            continue
        for b in r.boxes.xyxy.cpu().numpy().astype(int)[:max_crops]:
            x1, y1, x2, y2 = [max(0, v) for v in b]
            crop = img.crop((x1, y1, x2, y2))
            buf = io.BytesIO()
            crop.save(buf, format="JPEG", quality=90)
            crops.append(buf.getvalue())
    return crops


def render_parts_assistant(
    db_path: Path,
    default_label_map_path: Path | None = None,
    default_price_map_path: Path | None = None,
):
    st.header("üß† –ó–∞–ø—á–∞—Å—Ç—å + –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç (ProxyAPI)")

    defaults = get_defaults()
    with st.sidebar:
        st.subheader("ProxyAPI")
        api_key = st.text_input("API key", value=defaults["api_key"], type="password")
        base_url = st.text_input("Base URL", value=defaults["base_url"])
        model = st.selectbox("–ú–æ–¥–µ–ª—å", ["gpt-4o-mini", "gpt-4o", "gpt-4o-mini-compact"], index=0)

        st.subheader("–û–ø—Ü–∏–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è")
        use_yolo = st.checkbox("–°–Ω–∞—á–∞–ª–∞ –≤—ã–¥–µ–ª—è—Ç—å –¥–µ—Ç–∞–ª–∏ (YOLO)", value=False)
        yolo_path = st.text_input("–ü—É—Ç—å –∫ YOLO-–≤–µ—Å–∞–º", value="–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ/models/YOLOv8.pt")
        max_crops = st.slider("–ú–∞–∫—Å. —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤", 1, 12, 6)

        st.subheader("–ö–ª–∞—Å—Å—ã")
        labels = DEFAULT_LABELS.copy()
        if default_label_map_path and default_label_map_path.exists():
            try:
                lm = json.loads(default_label_map_path.read_text("utf-8"))
                if isinstance(lm, dict):
                    labels = [
                        v for _, v in sorted(
                            ((int(k), str(v)) for k, v in lm.items()),
                            key=lambda x: x[0]
                        )
                    ]
                elif isinstance(lm, list):
                    labels = [str(x) for x in lm]
            except Exception:
                pass
        labels = [
            ln.strip()
            for ln in st.text_area(
                "–°–ø–∏—Å–æ–∫ –º–µ—Ç–æ–∫ (–ø–æ –æ–¥–Ω–æ–π –≤ —Å—Ç—Ä–æ–∫–µ)", value="\n".join(labels), height=220
            ).splitlines()
            if ln.strip()
        ]
        st.caption(f"–ò—Ç–æ–≥–æ –º–µ—Ç–æ–∫: **{len(labels)}**")

        price_map = load_price_map(default_price_map_path)

    c1, c2 = st.columns([1, 1])
    with c1:
        st.markdown("### 1) –ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–µ—Ç–∞–ª–∏")
        file = st.file_uploader("JPG/PNG", type=["jpg", "jpeg", "png", "bmp", "tif", "tiff"])
        demo_btn = st.button("–î–µ–º–æ-–∫–∞—Ä—Ç–∏–Ω–∫–∞", use_container_width=True)
    with c2:
        st.markdown("### 2) –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ")
        run_btn = st.button(
            "üîç –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∑–∞–ø—á–∞—Å—Ç—å",
            type="primary",
            use_container_width=True,
            disabled=not (file or demo_btn),
        )

    img_bytes: Optional[bytes] = None
    filename: Optional[str] = None
    if file:
        img_bytes = file.read()
        filename = file.name
    elif demo_btn:
        demo_path = Path("ex2.jpg") if Path("ex2.jpg").exists() else Path("ex.png")
        if demo_path.exists():
            img_bytes = demo_path.read_bytes()
            filename = demo_path.name
        else:
            st.warning("–î–µ–º–æ-—Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω (ex2.jpg / ex.png)")

    if img_bytes:
        st.image(img_bytes, caption=filename or "–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", width=360)

    if run_btn and img_bytes:
        client = get_client(api_key=api_key, base_url=base_url)

        # 1) –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π YOLO pre-crop
        crops = _yolo_crops(img_bytes, Path(yolo_path), max_crops=max_crops) if use_yolo else []
        if not crops:
            crops = [img_bytes]

        # 2) –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –≤—Å–µ—Ö –∫—Ä–æ–ø–æ–≤ + –ø–µ—Ä–µ–≤–æ–¥ + –æ—Ü–µ–Ω–∫–∞ —Ü–µ–Ω—ã
        results_all: List[Dict[str, Any]] = []
        prog = st.progress(0)
        for i, crop in enumerate(crops):
            pairs = _proxy_classify(client, crop, labels, model)
            labs = [lab for lab, _ in pairs]
            ru_map = _proxy_translate(client, labs, model)
            top_en, top_sc = pairs[0]
            price = lookup_price(top_en, price_map) or fallback_price(top_en)

            results_all.append(
                dict(top=pairs, ru_map=ru_map, price=price, crop_index=i)
            )
            prog.progress(int((i + 1) / len(crops) * 100))

        st.success("–ì–æ—Ç–æ–≤–æ!")

        # 3) –í—ã–≤–æ–¥ –ø–æ –∫–∞–∂–¥–æ–º—É –∫—Ä–æ–ø—É
        tabs = st.tabs([f"–§—Ä–∞–≥–º–µ–Ω—Ç {i+1}" for i in range(len(results_all))])
        for tab, res in zip(tabs, results_all):
            with tab:
                if len(crops) > 1:
                    st.image(
                        crops[res["crop_index"]],
                        caption=f"crop #{res['crop_index']+1}",
                        width=360,
                    )
                df = pd.DataFrame(
                    [
                        {
                            "rank": j + 1,
                            "label_en": lab,
                            "label_ru": res["ru_map"].get(lab, lab),
                            "score": sc,
                        }
                        for j, (lab, sc) in enumerate(res["top"])
                    ]
                )
                st.dataframe(df, use_container_width=True)

                price = res["price"]
                st.markdown(
                    f"**–¶–µ–Ω–∞ (–æ—Ä–∏–µ–Ω—Ç–∏—Ä):** {price['price_min']}‚Äì{price['price_max']} {price['currency']} ¬∑ "
                    f"**–¢–æ–≤–∞—Ä:** {res['ru_map'].get(res['top'][0][0], res['top'][0][0])}"
                )

        # 4) –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ª—É—á—à–µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤ –ë–î
        best = results_all[0]
        top_en, top_sc = best["top"][0]
        top_ru = best["ru_map"].get(top_en, top_en)
        price = best["price"]

        insert_detection(
            db_path=db_path,
            ts=dt.datetime.now().isoformat(timespec="seconds"),
            kind="parts",
            source="image",
            filename=filename or "uploaded.jpg",
            model=model,
            label_en=top_en,
            label_ru=top_ru,
            score=float(top_sc),
            json_top5=json.dumps(
                [
                    {
                        "label_en": lab,
                        "label_ru": best["ru_map"].get(lab, lab),
                        "score": sc,
                    }
                    for lab, sc in best["top"]
                ],
                ensure_ascii=False,
            ),
            price_min=float(price["price_min"]),
            price_max=float(price["price_max"]),
            currency=price["currency"],
            image_path=None,
            plate_number=None,
            region=None,
            year_issued=None,
            brand=None,
            car_type=None,
            color=None,
            conf_avg=None,
            extra_json=None,
        )
        st.toast("–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ detections.db", icon="üíæ")

